#+title: minibook x notes

* wifi

wifi doesn't work until i add theses options in =/etc/modprobe.d/iwl.conf=

#+begin_src org :tangle iwl.conf
options iwlwifi 11n_disable=1 swcrypto=0 bt_coex_active=0 power_save=0
options iwlwifi uapsd_disable=1
options iwlmvm power_scheme=1
#+end_src


* bluetooth

with Version =20231211.f2e52a1c-1= of =linux-firmware=, missing files seems to have been added<

** old fix  
fix (on linux arch)

#+begin_src sh
sudo ln -s /usr/lib/firmware/intel/ibt-1040-4150.ddc.zst /usr/lib/firmware/intel/ibt-0040-1050.ddc.zst
sudo ln -s /usr/lib/firmware/intel/ibt-1040-4150.sfi.zst /usr/lib/firmware/intel/ibt-0040-1050.sfi.zst
#+end_src

#+RESULTS:



* grub

doesn't install properly with arch default installation : Boot into grub shell but no menu.

I have to enter the following commands to boot the kernel.

#+begin_src org
  set root=(hd0,gpt3)
  linux /boot/vmlinux-linux root=/dev/nvme0n1p3 fbcon=rotate:1
  initrd /boot/intel-ucode.img vmlinuz-linux.img
  boot
#+end_src

After that, install =grub-theme= and =grub-customizer= have fixed the problem, don't know what was wrong.


* acpi and suspend state

*note* : You should also update your desktop environment to use s2 sleeping when lid is closed.
by default, the selected mem suspend state is =s2= :

#+begin_src shell :noeval :exports both
cat /sys/power/mem_sleep
#+end_src

#+RESULTS:
: [s2idle] deep

*** adding =mem_sleep_default=deep= to grub config.

#+begin_src shell :exports both
cat /sys/power/mem_sleep
#+end_src

#+RESULTS:
 : s2idle [deep]
 

* screen orientation

Orientation is not correct at login. I use lightdm, so I created a
=display-setup.sh= script in =/etc/lightdm= directory:

#+begin_src sh :tangle display-setup.sh
  #!/bin/bash
  xrandr -o right
  exit 0
#+end_src

you have to add it in lightdm.conf configuration file, by uncommenting this line :

#+begin_src sh
  display-setup-script=/etc/lightdm/display-setup.sh
#+end_src


* touchscreen

** rotation

In order to properly calibrate touchscreen, a transformation must be
applied to pointer event :

- first determine pointer device :

  #+begin_src sh
    xinput list
  #+end_src

  #+RESULTS:
  | ⎡ Virtual core pointer               | id=2  | [master pointer  (3)] |
  | ⎜   ↳ Virtual core XTEST pointer     | id=4  | [slave  pointer  (2)] |
  | ⎜   ↳ Goodix Capacitive TouchScreen  | id=9  | [slave  pointer  (2)] |
  | ⎜   ↳ XXXX0000:05 0911:5288 Mouse    | id=10 | [slave  pointer  (2)] |
  | ⎜   ↳ XXXX0000:05 0911:5288 Touchpad | id=11 | [slave  pointer  (2)] |
  | ⎣ Virtual core keyboard              | id=3  | [master keyboard (2)] |
  | ↳ Virtual core XTEST keyboard        | id=5  | [slave  keyboard (3)] |
  | ↳ Video Bus                          | id=6  | [slave  keyboard (3)] |
  | ↳ Power Button                       | id=7  | [slave  keyboard (3)] |
  | ↳ Sleep Button                       | id=8  | [slave  keyboard (3)] |
  | ↳ Intel HID events                   | id=12 | [slave  keyboard (3)] |
  | ↳ Intel HID 5 button array           | id=13 | [slave  keyboard (3)] |
  | ↳ Goodix Capacitive TouchScreen      | id=15 | [slave  keyboard (3)] |
  | ↳ AT Translated Set 2 keyboard       | id=14 | [slave  keyboard (3)] |

- applied matrix tranformation to relevant device :
  
  - landscape mode

    #+begin_src sh
      xrandr -o 3
      xinput set-prop 9 --type=float "Coordinate Transformation Matrix" 0 1 0 -1 0 1 0 0 1
    #+end_src

    #+RESULTS:

  - tablet mode

    #+begin_src sh
      xrandr -o 0
      xinput set-prop 9 --type=float "Coordinate Transformation Matrix" 1 0 0 0 1 0 0 0 1
    #+end_src


** tablet switch

#+begin_src sh
  #! /bin/bash -

  # We need to test if we have both sensors
  # if not we need to add the second one
  # Both should exist (Thanks to https://github.com/sleeply4cat for pointing me in this direction)

  # /sys/bus/iio/devices/iio:device0/in_accel_x_raw (Lid)
  # /sys/bus/iio/devices/iio:device1/in_accel_x_raw (Base)
  #
  # echo mxc4005 0x15 > /sys/bus/i2c/devices/i2c-0/new_device

  if ! grep -q 0 "/sys/bus/iio/devices/iio:device1/in_accel_x_raw"; then
     echo mxc4005 0x15 > /sys/bus/i2c/devices/i2c-12/new_device
  fi

  # For this script we assume that /tmp exist and is writable
  PIDFILE="/tmp/kbdlock.pid"
  STATEFILE="/tmp/kbdlock.state"
  CURRENTSTATE=0
  KBDEVENT=`ls /dev/input/by-path/ -la | grep kbd | awk '{print $NF}' | sed "s/..\///"`

  # rm is only for a restart of the service
  # Create a fresh pid file
  rm $PIDFILE
  echo "" > $PIDFILE
  chmod 777 $PIDFILE

  # Create a fresh state file
  rm $STATEFILE
  echo 0 > $STATEFILE
  chmod 777 $STATEFILE

  # Make lock and unlock function
  function kbd_lock {
      echo "State changed to 1"
      evtest --grab "/dev/input/$KBDEVENT" > /dev/null &pid=$!
      echo $pid > $PIDFILE
  }

  function kbd_unlock {
    echo "State changed to 0"
    cat "$PIDFILE" | xargs kill -9 >/dev/null 2>&1
    #kill -9 `cat "$PIDFILE"` > /dev/null 2>&1
    echo "" > $PIDFILE
  }

  while true
  do
      # Here we create an endless loop to test the state file.
      # if it contains a 0 the keyboard should not be locked
      # if it contains a 1 the keyboard should be locked
      if grep -q 0 "$STATEFILE"; then
          if [ $CURRENTSTATE = 1 ]; then
              # State changed to 0
              # We will unlock the keyboard here
              kbd_unlock
              # and we change the state to the new current state
              CURRENTSTATE=0
          fi
      else
          if [ $CURRENTSTATE = 0 ]; then
              # State changed to 1
              # We will lock the keyboard here
              kbd_lock
              # and we change the state to the new current state
              CURRENTSTATE=1
          fi
      fi
    sleep 1
  done
#+end_src
** FIXME multitouch (not functionnal)

*** test 1 (not functionnal)

bus 0x18 vendor 0x416 product 0x2396 version 0x2040
#+begin_src shell
echo 18 416 2396 4 > /sys/module/hid_multitouch/drivers/hid\:hid-multitouch/new_id
#+end_src


*** test 2 :

add  /etc/X11/xorg.conf.d/99-touchscreen.conf  with

#+begin_src org
Section "InputClass"
  Identifier    "TouchScreen"
  MatchProduct  "Goodix Capacitive TouchScreen"
  Driver        "libinput"
  Option        "Tapping" "true"
  Option        "TappingDrag" "true"
  Option        "TransformationMatrix"   "0 1 0 -1 0 1 0 0 1"
EndSection
#+end_src
** separate mouse and touchscreen

#+begin_src shell :exports both :results pp
xinput list
#+end_src

#+RESULTS:
#+begin_example
⎡ Virtual core pointer                    	id=2	[master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer              	id=4	[slave  pointer  (2)]
⎜   ↳ Goodix Capacitive TouchScreen           	id=9	[slave  pointer  (2)]
⎜   ↳ XXXX0000:05 0911:5288 Mouse             	id=10	[slave  pointer  (2)]
⎜   ↳ XXXX0000:05 0911:5288 Touchpad          	id=11	[slave  pointer  (2)]
⎣ Virtual core keyboard                   	id=3	[master keyboard (2)]
    ↳ Virtual core XTEST keyboard             	id=5	[slave  keyboard (3)]
    ↳ Video Bus                               	id=6	[slave  keyboard (3)]
    ↳ Power Button                            	id=7	[slave  keyboard (3)]
    ↳ Sleep Button                            	id=8	[slave  keyboard (3)]
    ↳ Intel HID events                        	id=12	[slave  keyboard (3)]
    ↳ Intel HID 5 button array                	id=13	[slave  keyboard (3)]
    ↳ Goodix Capacitive TouchScreen           	id=15	[slave  keyboard (3)]
    ↳ AT Translated Set 2 keyboard            	id=14	[slave  keyboard (3)]
#+end_example

1. create a new master pointer
   #+begin_src shell :exports both
xinput create-master touchscreen
   #+end_src

   #+RESULTS:

   this creates a new master pointer / keyboard pair

   #+begin_src shell :export both :results pp
xinput list
   #+end_src

   #+RESULTS:
   #+begin_example
   ⎡ Virtual core pointer                    	id=2	[master pointer  (3)]
   ⎜   ↳ Virtual core XTEST pointer              	id=4	[slave  pointer  (2)]
   ⎜   ↳ Goodix Capacitive TouchScreen           	id=9	[slave  pointer  (2)]
   ⎜   ↳ XXXX0000:05 0911:5288 Mouse             	id=10	[slave  pointer  (2)]
   ⎜   ↳ XXXX0000:05 0911:5288 Touchpad          	id=11	[slave  pointer  (2)]
   ⎣ Virtual core keyboard                   	id=3	[master keyboard (2)]
       ↳ Virtual core XTEST keyboard             	id=5	[slave  keyboard (3)]
       ↳ Video Bus                               	id=6	[slave  keyboard (3)]
       ↳ Power Button                            	id=7	[slave  keyboard (3)]
       ↳ Sleep Button                            	id=8	[slave  keyboard (3)]
       ↳ Intel HID events                        	id=12	[slave  keyboard (3)]
       ↳ Intel HID 5 button array                	id=13	[slave  keyboard (3)]
       ↳ Goodix Capacitive TouchScreen           	id=15	[slave  keyboard (3)]
       ↳ AT Translated Set 2 keyboard            	id=14	[slave  keyboard (3)]
   ⎡ touchscreen pointer                     	id=16	[master pointer  (17)]
   ⎜   ↳ touchscreen XTEST pointer               	id=18	[slave  pointer  (16)]
   ⎣ touchscreen keyboard                    	id=17	[master keyboard (16)]
       ↳ touchscreen XTEST keyboard              	id=19	[slave  keyboard (17)]
   #+end_example

2. attach touchscreen to new master
   #+begin_src shell :exports both :results pp
     xinput reattach 9 16
     xinput reattach 15 17
     xinput list
   #+end_src

   #+RESULTS:
   #+begin_example
   ⎡ Virtual core pointer                    	id=2	[master pointer  (3)]
   ⎜   ↳ Virtual core XTEST pointer              	id=4	[slave  pointer  (2)]
   ⎜   ↳ XXXX0000:05 0911:5288 Mouse             	id=10	[slave  pointer  (2)]
   ⎜   ↳ XXXX0000:05 0911:5288 Touchpad          	id=11	[slave  pointer  (2)]
   ⎣ Virtual core keyboard                   	id=3	[master keyboard (2)]
       ↳ Virtual core XTEST keyboard             	id=5	[slave  keyboard (3)]
       ↳ Video Bus                               	id=6	[slave  keyboard (3)]
       ↳ Power Button                            	id=7	[slave  keyboard (3)]
       ↳ Sleep Button                            	id=8	[slave  keyboard (3)]
       ↳ Intel HID events                        	id=12	[slave  keyboard (3)]
       ↳ Intel HID 5 button array                	id=13	[slave  keyboard (3)]
       ↳ AT Translated Set 2 keyboard            	id=14	[slave  keyboard (3)]
   ⎡ touchscreen pointer                     	id=16	[master pointer  (17)]
   ⎜   ↳ Goodix Capacitive TouchScreen           	id=9	[slave  pointer  (16)]
   ⎜   ↳ touchscreen XTEST pointer               	id=18	[slave  pointer  (16)]
   ⎣ touchscreen keyboard                    	id=17	[master keyboard (16)]
       ↳ Goodix Capacitive TouchScreen           	id=15	[slave  keyboard (17)]
       ↳ touchscreen XTEST keyboard              	id=19	[slave  keyboard (17)]
   #+end_example


* screen auto rotation

- acpi contains a device MDA6655 which seems working.
  - adding "mda6655" in kernel source's =mxc4005.c= file made it functionnal.
  - after modprobing mxc4005, a new device appear : =/sys/bus/iio/devices/device0=
- then :
  #+begin_src shell :results raw pp
udevadm info --export-db | grep iio
  #+end_src

  #+RESULTS:
  #+begin_example
  P: /devices/pci0000:00/0000:00:15.1/i2c_designware.1/i2c-13/i2c-MDA6655:00/iio:device0
  M: iio:device0
  U: iio
  T: iio_device
  N: iio:device0
  E: DEVPATH=/devices/pci0000:00/0000:00:15.1/i2c_designware.1/i2c-13/i2c-MDA6655:00/iio:device0
  E: SUBSYSTEM=iio
  E: DEVNAME=/dev/iio:device0
  E: DEVTYPE=iio_device
  E: IIO_SENSOR_PROXY_TYPE=iio-poll-accel iio-buffer-accel
  E: SYSTEMD_WANTS=iio-sensor-proxy.service
  #+end_example


- =monitor-sensor= of =iio-sensor-proxy= package print theses orientations :
  - right-up
  - normal
  - bottom-up
  - left-up
- gdbus
  #+begin_src shell :results raw pp
gdbus introspect --system --dest net.hadess.SensorProxy --object-path /net/hadess/SensorProxy
  #+end_src

  #+RESULTS:
  #+begin_example
  node /net/hadess/SensorProxy {
    interface org.freedesktop.DBus.Properties {
      methods:
        Get(in  s interface_name,
            in  s property_name,
            out v value);
        GetAll(in  s interface_name,
               out a{sv} properties);
        Set(in  s interface_name,
            in  s property_name,
            in  v value);
      signals:
        PropertiesChanged(s interface_name,
                          a{sv} changed_properties,
                          as invalidated_properties);
      properties:
    };
    interface org.freedesktop.DBus.Introspectable {
      methods:
        Introspect(out s xml_data);
      signals:
      properties:
    };
    interface org.freedesktop.DBus.Peer {
      methods:
        Ping();
        GetMachineId(out s machine_uuid);
      signals:
      properties:
    };
    interface net.hadess.SensorProxy {
      methods:
        ClaimAccelerometer();
        ReleaseAccelerometer();
        ClaimLight();
        ReleaseLight();
        ClaimProximity();
        ReleaseProximity();
      signals:
      properties:
        readonly b HasAccelerometer = true;
        readonly s AccelerometerOrientation = 'right-up';
        readonly b HasAmbientLight = false;
        readonly s LightLevelUnit = 'lux';
        readonly d LightLevel = 0.0;
        readonly b HasProximity = false;
        readonly b ProximityNear = false;
    };
    node Compass {
    };
  };
  #+end_example

- auto rotate script

#+begin_src shell :tangle autorotate.sh
#!/bin/bash

SCREEN="DSI-1"
XINPUT=("pointer:Goodix Capacitive TouchScreen")
DEVICES=("XXXX0000:05 0911:5288 Touchpad" "AT Translated Set 2 keyboard")

#uses the values output by monitor-sensor to call the rotate function
function rotate_ms {
    case $1 in
        "normal")
            rotate 0
            ;;
        "right-up")
            rotate 1
            ;;
        "bottom-up")
            rotate 2
            ;;
        "left-up")
            rotate 3
            ;;
    esac
}

function disable_devices {
    for dev in ${!DEVICES[@]};
    do
        echo "disabling ${DEVICES[$dev]}"
        xinput disable "${DEVICES[$dev]}"
    done
}

function enable_devices {
    for dev in ${!DEVICES[@]};
    do
        xinput enable "${DEVICES[$dev]}"
    done
}

function rotate {
    O_NAMES=("normal" "right" "inverted" "left")
    COORDS=("1, 0, 0, 0, 1, 0, 0, 0, 1" "0, 1, 0, -1, 0, 1, 0, 0, 1" "-1, 0, 1, 0, -1, 1, 0, 0, 1" "0, -1, 1, 1, 0, 0, 0, 0, 1")
    W_NAMES=("none" "cw" "half" "ccw")

    O_NO=$1

    TARGET_ORIENTATION=${O_NAMES[$O_NO]}

    echo "Rotating to" $TARGET_ORIENTATION

    #Rotate the screen
    xrandr --output $SCREEN --rotate $TARGET_ORIENTATION

    #Rotate libinput driver input devices
    for i in "${XINPUT[@]}"
    do
        xinput set-prop "$i" "Coordinate Transformation Matrix" ${COORDS[$O_NO]}
    done
}

while IFS='$\n' read -r line; do
    rotation="$(echo $line | sed -En "s/^.*orientation changed: (.*)/\1/p")"
    [[ !  -z  $rotation  ]] && rotate_ms $rotation
done < <(stdbuf -oL monitor-sensor)
  #+end_src

in fact, the device has two sensor : one for the lid and the other for the base. But the second one is disable by default. To be able to read it's value, this snippet is required :

#+begin_src shell
if ! grep -q 0 "/sys/bus/iio/devices/iio:device1/in_accel_x_raw"; then
     echo mxc4005 0x15 > /sys/bus/i2c/devices/i2c-12/new_device
fi
#+end_src

In my case, lid sensor has the index 13 on i2c bus, and then unit sensor has the index 12. If your lid sensor has the index 1, i bet unit index is 0.

So we're going to read the values of two vector in xOz plane (Ox is the vertical axes, Oz an horizontal axis ...)

let's read this values with python :

#+begin_src python :tangle autokb.py
  #!/usr/bin/python3
  import subprocess
  from time import sleep

  LID = "device0"
  UNIT = "device1"
  X_AXIS = 'x'
  Z_AXIS = 'z'
  KB_DISABLED = False
  DEVICES = ("XXXX0000:05 0911:5288 Touchpad", "AT Translated Set 2 keyboard")
  SENSOR_FILE = "/sys/bus/iio/devices/iio:{}/in_accel_{}_raw"
  DEBUG = False

  def sensor_read(device: str, axis: str):
      with open(SENSOR_FILE.format(device, axis), 'r') as f_in:
          res = int(f_in.readline().strip())
      return res

  def vector_for(device: str) -> tuple[int, int]:
      return tuple(sensor_read(device, axis)
                   for axis in (X_AXIS, Z_AXIS))

  def det(v: tuple[int, int], w: tuple[int, int]) -> int:
      vx, vy = v
      wx, wy = w
      return vx * wy - wx * vy

  def dot(v: tuple[int, int], w: tuple[int, int]) -> int:
      vx, vy = v
      wx, wy = w
      return vx * wx + vy * wy

  def devices_set_disable(disable: bool):
      global KB_DISABLED
      verb = "disable" if disable else "enable"
      for device in DEVICES:
          retcode = subprocess.call(f"xinput {verb} \"{device}\"",
                                    stdout=subprocess.DEVNULL,
                                    stderr=subprocess.DEVNULL,
                                    shell=True)
      KB_DISABLED = disable


  if __name__ == '__main__':
      while True:
          vlid = vector_for(LID)
          vunit = vector_for(UNIT)
          if DEBUG:
              print(f"vlid={vlid}, vunit={vunit}, det={det(vlid, vunit)}, dot={dot(vlid, vunit)}")
          if det(vlid, vunit) < 0 and dot(vlid, vunit) > 0:
              if not KB_DISABLED:
                  print("disabling devices ...")
                  devices_set_disable(True)
          else:
              if KB_DISABLED:
                  print("enabling devices ...")
                  devices_set_disable(False)
          sleep(1)
#+end_src

#+RESULTS:
: -959



* lightdm tap to click

create a file =/etc/X11/xorg.conf.d/40-libinput.conf=

#+begin_src org :tangle 40-libinput.conf
  Section "InputClass"
     Identifier "libinput touchpad catchall"
     MatchIsTouchpad "on"
     MatchDevicePath "/dev/input/event*"
     Driver "libinput"
     Option "Tapping" "on"
  EndSection
#+end_src


* graphic drivers

** using git modesetting
compile xorg-server-git from AUR seems to fix the tearing problem in conjonction with next section.

** xorg server parameter
Intel iGPUs
File: /etc/X11/xorg.conf.d/20-intel-gpu.conf
#+begin_src org

Section "Device"
   Identifier  "Intel Graphics"
   Driver      "modesetting"
   Option      "TearFree"  "true"
EndSection
#+end_src


* emulate multitouch

in order to simulate multitouch in application that doesn't use it, we need to detect new touch on touchscreen, move the pointer , simulate a click and move it back.

#+begin_src shell :tangle multitouch.sh
#!/bin/bash
DEVICE=/dev/input/event8
STACK_POINTER_X=()
STACK_POINTER_Y=()
slot=0
while IFS='$\n' read -r line; do
    catch_id="$(echo $line | grep -a ABS_MT_TRACKING_ID | sed -En "s/^.*value (.*)/\1/p")"
    catch_slot="$(echo $line | grep -a ABS_MT_SLOT | sed -En "s/^.*value (.*)/\1/p")"
    catch_pointer_x="$(echo $line | grep -a ABS_MT_POSITION_X | sed -En "s/^.*value (.*)/\1/p")"
    catch_pointer_y="$(echo $line | grep -a ABS_MT_POSITION_Y | sed -En "s/^.*value (.*)/\1/p")"
    [[ -n $catch_slot ]] && slot=$catch_slot
    if [[ -n $catch_id ]] && [[ "$catch_id" -lt 0 ]]
       # move released
    then
        if [ "$slot" -gt 0 ]
        then
            # go back to original track
            xdotool mousemove ${STACK_POINTER_X[0]} ${STACK_POINTER_Y[0]} 
        else
            # original track has been released
            xdotool mouseup 1
        fi
    fi  
    if [[ -n $catch_pointer_x ]] || [[ -n $catch_pointer_y ]]
    then
        # need to be fixed as evtest and xdotool don't use the same system
        # coordinates. Whem screen is rotated, the conversion formula
        # is wrong and need to be updated.
        [[ -n $catch_pointer_y ]] && STACK_POINTER_X[slot]=$(( $catch_pointer_y ))
        [[ -n $catch_pointer_x ]] && STACK_POINTER_Y[slot]=$(( 1200 - $catch_pointer_x ))
        if [[ "$slot" -gt 0 ]] && [[ -n ${STACK_POINTER_X[$slot]} ]] && [[ -n ${STACK_POINTER_Y[$slot]} ]]
        then
            # a new track has been started 
            xdotool mousemove ${STACK_POINTER_X[$slot]} ${STACK_POINTER_Y[$slot]} mousedown 1
        fi
    fi
done < <(stdbuf -oL evtest $DEVICE)

#+end_src

#+RESULTS:

** not tested

- kernel params max_cstate and i915 enable_psr=0 are both red herrings.
- the root cause of the ‘display tearing / wake-after-sleep /
  corruption’ is the panel being put into an unsuppored timing mode by
  various modesettings invoked by the kernel drm…
- not that I’ve solved the underlying issue ( I’m working on a custom
  edid file but I don’t have a lot of time )… you can alleviate the
  symptoms by invoking:
  #+begin_src sh
    xrandr --output DSI-1 --off; sleep 2; xrandr --output DSI-1 --mode 1200x1920 --rotate right
  #+end_src
- the wifi can be fixed by adding “options iwlwifi disable_11ax=true”
  to /etc/modprobe.d/iwlwifi.conf and regenerating your initramfs.

#+begin_src sh
  915.enable_fbc=0 in the grub config
#+end_src
